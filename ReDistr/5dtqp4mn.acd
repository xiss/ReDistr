using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Xml.Linq;
using Microsoft.Office.Tools.Excel;
using Microsoft.VisualStudio.Tools.Applications.Runtime;
using Excel = Microsoft.Office.Interop.Excel;
using Office = Microsoft.Office.Core;

namespace ReDistr
{
	public partial class Transfers
	{
		private void Лист3_Startup(object sender, System.EventArgs e)
		{
		}

		private void Лист3_Shutdown(object sender, System.EventArgs e)
		{
		}

		#region Код, созданный конструктором VSTO

		/// <summary>
		/// Обязательный метод для поддержки конструктора - не изменяйте
		/// содержимое этого метода с помощью редактора кода.
		/// </summary>
		private void InternalStartup()
		{
			this.Startup += new System.EventHandler(Лист3_Startup);
			this.Shutdown += new System.EventHandler(Лист3_Shutdown);
		}

		#endregion

		// Определяем настройки
		private const int StartRow = 2;
		// Выводит на лист перемещения из списка перемещений сгруппированные по направлениям
		public void FillList(List<Transfer> transfers)
		{
			// Список возможных направлений перемещений
			var unitedTransfers = ReDistr.GetPossibleTransfers(SimpleStockFactory.CurrentFactory.GetAllStocks()).ToList();
			var curentRow = StartRow;

			foreach (var unitedTransfer in unitedTransfers)
			{
				// Выбираем перемещения сгруппированные по направлению и объедененные по ЗЧ
				//var transferList = transfers.Where(
				//	transfer => transfer.StockFrom.Name == unitedTransfer.StockFrom.Name && transfer.StockTo.Name == unitedTransfer.StockTo.Name)
				//	.GroupBy(transfer => transfer.Item).ToList();
				Transfer transfer = unitedTransfer;
				var transferList = (from t in transfers
					where t.StockFrom.Name == transfer.StockFrom.Name && t.StockTo.Name == transfer.StockTo.Name
					//group t by t.Item
					//into g
					select t).ToList();


				var resultRange = new dynamic[transferList.Count, 7];
				// Заполняем массив перемещениями
				for (int i = 0; i < transferList.Count; i++)
				{
					resultRange[i, 0] = transferList[i].Key.Id1C;
					resultRange[i, 1] = transferList[i].Key.Name;
					resultRange[i, 2] = transferList[i].Key.Article;
					resultRange[i, 3] = transferList[i].Key.Manufacturer;
					resultRange[i, 4] = transferList[i].Key.StorageCategory;
					resultRange[i, 5] = transferList[i].Key.InBundle;
					resultRange[i, 6] = transferList[i].Key.InKit;

				}
				Range[Cells[curentRow, 1], Cells[curentRow + transferList.Count, 7]].Value2 = resultRange;
				//resultRange = null;

				curentRow += transferList.Count + 1;


			}
		}
	}
}
